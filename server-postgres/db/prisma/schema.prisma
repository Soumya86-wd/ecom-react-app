generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  SELLER
}

enum TransactionState {
  IN_CART
  ORDERED
}

enum OrderState {
  ORDERED
  CANCELLED
  DELIVERED
}

model Brand {
  id         String    @id @default(uuid())
  name       String
  email      String
  website    String
  company    String
  products   Product[]
  createdAt  DateTime  @default(now())
  modifiedAt DateTime  @updatedAt
}

model Category {
  name       String    @id
  tagNames   String[]
  products   Product[]
  createdAt  DateTime  @default(now())
  modifiedAt DateTime  @updatedAt
}

model User {
  email         String    @id
  nickname      String    @unique @db.VarChar(8) // Must be 6 to 8 characters alphanumeric
  phone         String    @unique @db.VarChar(10) // Must be 10 characters all digits
  firstName     String
  middleName    String?
  lastName      String
  address       String
  role          UserRole  @default(CUSTOMER)
  cart          Cart?
  orders        Order[]
  productsOwned Product[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  modifiedAt    DateTime  @updatedAt
}

model Product {
  id            String            @id @default(uuid())
  name          String
  description   String
  imgName       String
  imgType       String
  pricePaisa    BigInt // Must be >= 0
  stock         Int // Must be >= 0
  brand         Brand             @relation(fields: [brandId], references: [id])
  brandId       String
  category      Category          @relation(fields: [categoryName], references: [name])
  categoryName  String
  owner         User              @relation(fields: [ownerEmail], references: [email])
  ownerEmail    String
  ratingOnFifty Int?
  ratingCount   Int?
  isActive      Boolean           @default(true)
  transactions  TransactionItem[]
  createdAt     DateTime          @default(now())
  modifiedAt    DateTime          @updatedAt

  @@unique([name, brandId]) // One brand cannot have two products of the same name
}

model DeliveryOption {
  id           BigInt            @id @default(autoincrement())
  deliveryDays Int               @unique
  costPaisa    Int
  transactions TransactionItem[]
  createdAt    DateTime          @default(now())
  modifiedAt   DateTime          @updatedAt

  @@unique([deliveryDays, costPaisa])
}

model TransactionItem {
  id               BigInt           @id @default(autoincrement())
  product          Product          @relation(fields: [productId], references: [id])
  productId        String
  deliveryOption   DeliveryOption   @relation(fields: [deliveryOptionId], references: [id])
  deliveryOptionId BigInt
  quantity         Int // Must be > 0
  state            TransactionState @default(IN_CART)
  cart             Cart?            @relation(fields: [cartId], references: [id])
  cartId           String? // Initially a transaction item will be added to cart 
  order            Order?           @relation(fields: [orderId], references: [id])
  orderId          String? // but later moved to an order
  createdAt        DateTime         @default(now())
  modifiedAt       DateTime         @updatedAt
}

model Cart {
  id            String            @id @default(uuid())
  customer      User              @relation(fields: [customerEmail], references: [email])
  customerEmail String            @unique // One user - at most One cart (at a time)
  items         TransactionItem[]
  createdAt     DateTime          @default(now())
  modifiedAt    DateTime          @updatedAt
}

model Order {
  id            String            @id @default(uuid())
  customer      User              @relation(fields: [customerEmail], references: [email])
  customerEmail String
  items         TransactionItem[]
  paymentId     String            @default(uuid())
  status        OrderState        @default(ORDERED)
  orderDate     DateTime          @default(now()) // similar to createdAt
  deliveryDate  DateTime // Constraint: deliveryDate > orderDate
  modifiedAt    DateTime          @updatedAt

  @@index([customerEmail, deliveryDate])
}
